generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Client {
  // IDs
  id               String         @id @default(uuid())
  uniqueId         String?        @unique @map("unique_id")

  // Personal Info
  firstName        String?        @map("first_name")
  lastName         String?        @map("last_name")
  name             String
  rut              String?        @unique
  email            String?        @unique
  phone            String?

  // Address
  address          String?
  propertyType     String?        @map("property_type")
  propertyNumber   String?        @map("property_number")
  comuna           String?

  // Account Status
  status           String         @default("ACTIVE")
  generalComments  String?        @map("general_comments")
  contactChannel   String?        @map("contact_channel")

  // Timestamps
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  // Relations
  maintenances     Maintenance[]
  incidents        Incident[]
  equipment        Equipment[]
  contracts        Contract[]

  @@map("clients")
}

model Maintenance {
  id            String            @id @default(uuid())
  clientId      String            @map("client_id")

  // Dates
  scheduledDate DateTime          @map("scheduled_date")    // Programmed date from Excel
  actualDate    DateTime?         @map("actual_date")       // When it was actually done
  completedDate DateTime?         @map("completed_date")

  // Type and cycle
  type          String                                      // 6_months, 12_months, etc
  cycleNumber   Int?              @map("cycle_number")      // 1, 2, 3, 4

  // Status
  status        String            @default("PENDING")

  // Metrics (calculated)
  deviationDays Int?              @map("deviation_days")    // actualDate - scheduledDate
  responseRate  String?           @map("response_rate")     // EXCELLENT/GOOD/FAIR/POOR

  // Notes
  notes         String?
  observations  String?                                     // From Excel
  technicianId  String?           @map("technician_id")

  // Delivery and work order
  deliveryType  String?           @map("delivery_type")     // PRESENCIAL | DOMICILIO
  workOrderId   String?           @map("work_order_id")

  // Timestamps
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")

  // Relations
  client        Client                   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  workOrder     WorkOrder?               @relation(fields: [workOrderId], references: [id])
  filterUsage   MaintenanceFilterUsage[] // Track filters used in this maintenance

  @@unique([clientId, cycleNumber], name: "unique_client_cycle")
  @@index([scheduledDate])
  @@index([actualDate])
  @@index([status])
  @@index([responseRate])
  @@index([cycleNumber])
  @@index([deliveryType])
  @@index([workOrderId])
  @@map("maintenances")
}

model Equipment {
  id                  String    @id @default(uuid())
  clientId            String    @map("client_id")

  // Equipment details
  equipmentType       String?   @map("equipment_type")
  serialNumber        String?   @map("serial_number")
  color               String?
  filterType          String?   @map("filter_type")

  // Installation details
  installationDate    DateTime? @map("installation_date")
  deliveryType        String?   @map("delivery_type")
  installerTechnician String?   @map("installer_technician")

  // Active tracking (supports equipment history)
  isActive            Boolean   @default(true) @map("is_active")

  // Timestamps
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  client              Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([isActive])
  @@index([filterType])
  @@map("equipment")
}

model Contract {
  id               String    @id @default(uuid())
  clientId         String    @map("client_id")

  // Plan details
  planCode         String?   @map("plan_code")
  planType         String?   @map("plan_type")

  // Pricing
  planCurrency     String?   @map("plan_currency")
  planValueCLP     Int?      @map("plan_value_clp")
  monthlyValueCLP  Int?      @map("monthly_value_clp")
  monthlyValueUF   Float?    @map("monthly_value_uf")
  discountPercent  Float?    @map("discount_percent")

  // Payment methods
  tokuEnabled      Boolean   @default(false) @map("toku_enabled")
  needsInvoice     Boolean?  @map("needs_invoice")

  // Contract period
  startDate        DateTime? @map("start_date")
  endDate          DateTime? @map("end_date")

  // Active tracking (supports contract history)
  isActive         Boolean   @default(true) @map("is_active")

  // Timestamps
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  client           Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([isActive])
  @@index([planCode])
  @@index([startDate])
  @@map("contracts")
}

model Inventory {
  id            String       @id @default(uuid())
  equipmentType String?      @map("equipment_type")  // DEPRECATED: kept for backward compatibility
  filterId      String?      @map("filter_id")       // NEW: Foreign key to Filter
  quantity      Int          @default(0)
  minStock      Int          @default(10) @map("min_stock")
  location      String?
  lastRestocked DateTime?    @map("last_restocked")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  // Relations
  filter        Filter?      @relation(fields: [filterId], references: [id])

  @@unique([equipmentType, location], name: "unique_equipment_location")
  @@unique([filterId, location], name: "unique_filter_location")
  @@index([filterId])
  @@map("inventory")
}

// ============================================
// EQUIPMENT INVENTORY SYSTEM
// ============================================

model EquipmentInventory {
  id              String    @id @default(uuid())

  // Equipment details
  equipmentModel  String    @map("equipment_model")    // "WHP-3200 UF", "WHP-4200 RO Negro", "WHP-4230", "Llave"
  quantity        Int       @default(0)                // Current stock (excludes equipment assigned to clients)
  minStock        Int       @default(5) @map("min_stock")
  location        String                               // "Bodega Principal", "Bodega Secundaria"

  // Financial
  unitCost        Float?    @map("unit_cost")          // Cost per unit in CLP

  // Tracking
  lastRestocked   DateTime? @map("last_restocked")
  notes           String?                              // Optional notes

  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@unique([equipmentModel, location], name: "unique_equipment_model_location")
  @@index([equipmentModel])
  @@index([location])
  @@map("equipment_inventory")
}

// ============================================
// FILTER INVENTORY SYSTEM
// ============================================

model Filter {
  id              String    @id @default(uuid())
  sku             String    @unique                  // "PP-10CF", "S/P COMBI", etc.
  name            String                             // Display name
  description     String?                            // Details about the filter
  category        String                             // "UF" or "RO"
  unitCost        Float?    @map("unit_cost")        // Cost per unit (optional)

  // Relations
  inventoryItems     Inventory[]
  packageItems       FilterPackageItem[]
  usageRecords       MaintenanceFilterUsage[]
  workOrderUsage     WorkOrderFilterUsage[]

  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@index([category])
  @@index([sku])
  @@map("filters")
}

model FilterPackage {
  id          String    @id @default(uuid())
  code        String    @unique                      // "1.1", "1.2", "2.1", "2.2", "5.2"
  name        String                                 // "UF Partial", "RO Complete", etc.
  description String?                                // Usage details

  // Relations
  items       FilterPackageItem[]
  mappings    EquipmentFilterMapping[]

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([code])
  @@map("filter_packages")
}

model FilterPackageItem {
  id         String         @id @default(uuid())
  packageId  String         @map("package_id")
  filterId   String         @map("filter_id")
  quantity   Int            @default(1)               // Usually 1 per filter type

  // Relations
  package    FilterPackage  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  filter     Filter         @relation(fields: [filterId], references: [id], onDelete: Cascade)

  createdAt  DateTime       @default(now()) @map("created_at")

  @@unique([packageId, filterId], name: "unique_package_filter")
  @@index([packageId])
  @@index([filterId])
  @@map("filter_package_items")
}

model EquipmentFilterMapping {
  id              String         @id @default(uuid())
  planCode        String         @map("plan_code")         // "3200RODE", "4200RODE", etc.
  maintenanceCycle Int           @map("maintenance_cycle")  // 6, 12, 18, or 24
  packageId       String         @map("package_id")

  // Relations
  package         FilterPackage  @relation(fields: [packageId], references: [id], onDelete: Cascade)

  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  @@unique([planCode, maintenanceCycle], name: "unique_plan_cycle")
  @@index([planCode])
  @@index([maintenanceCycle])
  @@map("equipment_filter_mappings")
}

model MaintenanceFilterUsage {
  id             String       @id @default(uuid())
  maintenanceId  String       @map("maintenance_id")
  filterId       String       @map("filter_id")
  quantityUsed   Int          @map("quantity_used")        // Number of units deducted
  deductedAt     DateTime     @default(now()) @map("deducted_at")
  notes          String?                                   // Optional notes

  // Relations
  maintenance    Maintenance  @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  filter         Filter       @relation(fields: [filterId], references: [id])

  @@unique([maintenanceId, filterId], name: "unique_maintenance_filter")
  @@index([maintenanceId])
  @@index([filterId])
  @@index([deductedAt])
  @@map("maintenance_filter_usage")
}

// ============================================
// WORK ORDERS SYSTEM
// ============================================

model WorkOrder {
  id                String    @id @default(uuid())

  // Period
  month             Int       // 1-12
  year              Int       // 2025
  deliveryType      String    // "DOMICILIO" | "PRESENCIAL"

  // Status workflow: DRAFT → GENERATED → CANCELLED
  status            String    @default("DRAFT")

  // Summary data (calculated at generation)
  totalMaintenances Int       @default(0) @map("total_maintenances")
  packageSummary    Json?     @map("package_summary")   // {"2.1": 28, "3.1": 28, "4.1": 12}
  filterSummary     Json?     @map("filter_summary")    // {"PP-10CF": 156, "CTO-10CF": 156}

  // Delivery information
  deliveryDate      DateTime? @map("delivery_date")     // Editable date when packages will be sent

  // Timestamps
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  generatedAt       DateTime? @map("generated_at")      // When status changed to GENERATED
  cancelledAt       DateTime? @map("cancelled_at")      // When status changed to CANCELLED

  // Relations
  maintenances      Maintenance[]
  filterUsage       WorkOrderFilterUsage[]

  @@unique([year, month, deliveryType], name: "unique_period_delivery")
  @@index([status])
  @@index([year, month])
  @@index([deliveryType])
  @@map("work_orders")
}

model WorkOrderFilterUsage {
  id            String     @id @default(uuid())
  workOrderId   String     @map("work_order_id")
  filterId      String     @map("filter_id")
  quantityUsed  Int        @map("quantity_used")
  deductedAt    DateTime   @default(now()) @map("deducted_at")
  restoredAt    DateTime?  @map("restored_at")  // When work order was cancelled

  // Relations
  workOrder     WorkOrder  @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  filter        Filter     @relation(fields: [filterId], references: [id])

  @@unique([workOrderId, filterId], name: "unique_workorder_filter")
  @@index([workOrderId])
  @@index([filterId])
  @@index([deductedAt])
  @@map("work_order_filter_usage")
}

model Incident {
  id          String         @id @default(uuid())
  clientId    String         @map("client_id")
  type        String         // TODO: Change to IncidentType after running supabase/fix-enums.sql
  description String
  status      String         @default("OPEN") // TODO: Change to IncidentStatus after running supabase/fix-enums.sql
  priority    String         @default("MEDIUM") // TODO: Change to Priority after running supabase/fix-enums.sql
  resolvedAt  DateTime?      @map("resolved_at")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  
  client      Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@index([status])
  @@index([createdAt])
  @@map("incidents")
}

// Enums
enum ClientStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CANCELLED
}

enum MaintenanceType {
  SIX_MONTHS      @map("6_months")
  TWELVE_MONTHS   @map("12_months")
  EIGHTEEN_MONTHS @map("18_months")
  TWENTY_FOUR_MONTHS @map("24_months")
}

enum MaintenanceStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum IncidentType {
  EQUIPMENT_FAILURE
  FILTER_ISSUE
  WATER_QUALITY
  BILLING
  OTHER
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum UserRole {
  ADMIN       @map("admin")
  TECHNICIAN  @map("technician")
  MANAGER     @map("manager")
  CLIENT      @map("client")
}

// User authentication and authorization
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      UserRole @default(TECHNICIAN)

  // Supabase auth user ID (from auth.users)
  authId    String?  @unique @map("auth_id")

  // Status
  isActive  Boolean  @default(true) @map("is_active")

  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lastLogin DateTime? @map("last_login")

  @@index([email])
  @@index([role])
  @@index([authId])
  @@map("users")
}